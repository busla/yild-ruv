<?php

/**
 * @file
 * Defines a Musicbrainz provider for Yild.
 */

define('YILD_MUSICBRAINZ_API', 'http://musicbrainz.org/ws/2/');
define('YILD_MUSICBRAINZ_CACHE_LIFETIME', 86400);
define('YILD_MUSICBRAINZ_MAX_HITS', 10);

/**
 * Implements hook_yild_search().
 *
 * Performs a Yild search specific to Musicbrainz and return the result.
 */
function yild_musicbrainz_yild_search($search_string, $lang = 'en') {
  $options = array(
    'method' => 'GET',
    'timeout' => 3,
    'headers' => array(
      'User-agent' => 'Yild ( joakim.calais@yle.fi )',
      'Accept' => 'application/json',
    ),
  );
  $ret = array();
  foreach (['artist', 'work'] as $cat) {
    $uri = YILD_MUSICBRAINZ_API . $cat . '/?query=' . rawurlencode($search_string) . '&limit=' . YILD_MUSICBRAINZ_MAX_HITS . '&fmt=json';
    $cache = _yild_musicbrainz_get_search_cache($uri);
    if (!empty($cache)) {
      $search_result = $cache;
    }
    else {
      $result = drupal_http_request($uri, $options);
      // Only show result if there was no error.
      if (empty($result->error)) {
        $search_result = drupal_json_decode($result->data);
        _yild_musicbrainz_put_search_cache($uri, $search_result);
      }
      else {
        // TODO: decide on error handling.
        drupal_set_message(t('The request to @provider resulted in the following error: @error.', array(
          '@provider' => yild_musicbrainz_yild_get_provider_name(),
          '@error' => $result->error,
        )));
        return array();
      }
    }
    if ($cat == 'artist') {
      $ret = _yild_musicbrainz_parse_artist($search_result['artists']);
    }
    else {
      $ret = array_merge($ret, _yild_musicbrainz_parse_work($search_result['works']));
    }
  }
  return $ret;
}

/**
 * Simply returns the name of the provider.
 *
 * @return string
 *   The name of the provider.
 */
function yild_musicbrainz_yild_get_provider_name() {
  return 'musicbrainz';
}

/**
 * Retrieves a search result from Drupal's internal cache.
 *
 * @param string $cid
 *   The cache id to use.
 */
function _yild_musicbrainz_get_search_cache($cid) {
  $cache = cache_get($cid, 'yild-cache');
  if (!empty($cache)) {
    if ($cache->expire > time()) {
      return $cache->data;
    }
  }
  return FALSE;
}

/**
 * Saves a search to Drupal's internal cache.
 *
 * @param string $cid
 *   The cache id to use.
 * @param array $data
 *   The data to cache.
 */
function _yild_musicbrainz_put_search_cache($cid, array $data) {
  cache_set($cid, $data, 'yild-cache', time() + YILD_MUSICBRAINZ_CACHE_LIFETIME);
}

/**
 * Parses a Musicbrainz artist search to find unique id, name and disambiguation type.
 *
 * @param array $result_set
 *   The result set received from the provider containing the suggestions.
 *
 * @return array
 *   An array with name, disambiguator, description for each autocomplete
 *   result.
 */
function _yild_musicbrainz_parse_artist(array $result_set) {
  $ret = array();

  // Then we assemble the autocomplete list.
  foreach ($result_set as $result) {
    $id = _yild_musicbrainz_get_id($result['id']);

    $data = array();
    $disambiguators = array();
    $name = $result['name'];
    $years = '';
    $description = '';

    // Disambiguator can contain type (group/person), country and years active.
    if ($result['type'] == 'group') {
      $disambiguators[] = $result['type'];
    }
    if (!empty($result['country'])) {
      $disambiguators[] = ucfirst(strtolower($result['country']));
    }
    if (!empty($result['life-span'])) {
      if (!empty($result['life-span']['begin'])) {
        $years = date('Y', strtotime($result['life-span']['begin']));
      }
      if (!empty($result['life-span']['ended'])) {
        $years .= '-' . date('Y', strtotime($result['life-span']['ended']));
      }
      if (!empty(trim($years))) {
        $disambiguators[] = $years;
      }
    }

    if (!empty($result['disambiguation'])) {
      $disambiguator = $result['disambiguation'];
      $description = implode(',', $disambiguators);
    }
    else {
      $disambiguator = implode(', ', $disambiguators);
    }

    if (!empty($id) && !empty($name)) {
      $ret[$id] = array(
        'name' => $name,
        'disambiguator' => $disambiguator,
        'data' => implode(';', $data),
        'description' => $description,
        'providerlabel' => 'artist',
        'order' => 0,
      );
    }
  }
  return $ret;
}

/**
 * Parses a Musicbrainz work search to find unique id, name and disambiguation type.
 *
 * @param array $result_set
 *   The result set received from the provider containing the suggestions.
 *
 * @return array
 *   An array with name, disambiguator, description for each autocomplete
 *   result.
 */
function _yild_musicbrainz_parse_work(array $result_set) {
  $ret = array();

  // Then we assemble the autocomplete list.
  foreach ($result_set as $result) {
    $id = _yild_musicbrainz_get_id($result['id']);

    $data = array();
    $name = $result['title'];

    // Disambiguator can contain type (group/person), country and years active.
    if (!empty($result['relations'])) {
      foreach ($result['relations'] as $relation) {
        if ($relation['type'] == 'composer' && !empty($relation['artist'])) {
          $composer = $relation['artist']['name'];
        }
      }
    }

    if (!empty($result['disambiguation'])) {
      $disambiguator = $result['disambiguation'];
      $description = $composer;
    }
    else {
      $disambiguator = $composer;
    }

    if (!empty($id) && !empty($name)) {
      $ret[$id] = array(
        'name' => $name,
        'disambiguator' => $disambiguator,
        'data' => implode(';', $data),
        'description' => $description,
        'providerlabel' => 'work',
        'order' => 1,
      );
    }
  }
  return $ret;
}

/**
 * Returns a Yild-compatible id based on the Musicbrainz mid.
 *
 * @param string $id
 *   The mid as provided by Freebase.
 */
function _yild_musicbrainz_get_id($id) {
  return 'musicbrainz:' . $id;
}

/**
 * Ensures an id is an official Musicbrainz Id.
 *
 * @param string $yild_id
 *   An id in an unofficial format.
 *
 * @return string
 *   An id in the official format.
 */
function _yild_musicbrainz_get_official_id($yild_id) {
  $id = str_replace('musicbrainz:', '', $yild_id);
  return $id;
}
