<?php

/**
 * @file
 * Defines a Geonames provider for Yild.
 */

define('YILD_GEONAMES_API', 'http://api.geonames.org/search');
define('YILD_GEONAMES_CACHE_LIFETIME', 86400);
define('YILD_GEONAMES_MAX_HITS', 10);
define('YILD_GEONAMES_USERNAME', 'demo');

/**
 * Implements hook_menu().
 */
function yild_geonames_menu() {
  $items = array();
  $items['admin/config/yild/geo'] = array(
    'title' => 'Yild Geonames settings',
    'description' => 'Settings for Yild Geonames provider.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yild_geonames_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'yild.geonames.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_yild_search().
 *
 * Performs a Yild search specific to Geonames and return the result.
 */
function yild_geonames_yild_search($search_string, $lang = 'en') {
  $uri = YILD_GEONAMES_API . '?name=' . rawurlencode($search_string) . '&maxRows=' . YILD_GEONAMES_MAX_HITS . '&username=' . variable_get('yild_geonames_username', YILD_GEONAMES_USERNAME) . '&type=json';
  $cache = _yild_geonames_get_search_cache($uri);
  if (!empty($cache)) {
    $search_result = $cache;
  }
  else {
    $options = array(
      'method' => 'GET',
      'timeout' => 3,
      'headers' => array(
        'Accept' => 'application/json',
      ),
    );

    $result = drupal_http_request($uri, $options);
    // Only show result if there was no error.
    if (empty($result->error)) {
      $search_result = drupal_json_decode($result->data);
      _yild_geonames_put_search_cache($uri, $search_result);
    }
    else {
      // TODO: decide on error handling.
      drupal_set_message(t('The request to @provider resulted in the following error: @error.', array(
        '@provider' => yild_geonames_yild_get_provider_name(),
        '@error' => $result->error,
      )));
      return array();
    }
  }
  if (!empty($search_result['geonames'])) {
    return _yild_geonames_parse_result($search_result['geonames']);
  }
  else {
    return array();
  }
}

/**
 * Simply returns the name of the provider.
 *
 * @return string
 *   The name of the provider.
 */
function yild_geonames_yild_get_provider_name() {
  return 'geonames';
}

/**
 * Retrieves a search result from Drupal's internal cache.
 *
 * @param string $cid
 *   The cache id to use.
 */
function _yild_geonames_get_search_cache($cid) {
  $cache = cache_get($cid, 'yild-cache');
  if (!empty($cache)) {
    if ($cache->expire > time()) {
      return $cache->data;
    }
  }
  return FALSE;
}

/**
 * Saves a search to Drupal's internal cache.
 *
 * @param string $cid
 *   The cache id to use.
 * @param array $data
 *   The data to cache.
 */
function _yild_geonames_put_search_cache($cid, array $data) {
  cache_set($cid, $data, 'yild-cache', time() + YILD_GEONAMES_CACHE_LIFETIME);
}

/**
 * Parses a Geonames response to find unique id, name and disambiguation type.
 *
 * @param array $result_set
 *   The result set received from the provider containing the suggestions.
 */
function _yild_geonames_parse_result(array $result_set) {
  $ret = array();
  foreach ($result_set as $result) {
    $id = _yild_geonames_get_id($result['geonameId']);
    $name = $result['name'];
    $type = _yild_geonames_get_type($result);
    // Save latitude and longitude in data field.
    $data = 'geocode:' . $result['lat'] . 'x' . $result['lng'];
    if (!empty($id) && !empty($name)) {
      $ret[$id] = array(
        'name' => $name,
        'disambiguator' => $type,
        'data' => $data,
      );
    }
  }
  return $ret;
}

/**
 * Extracts a disambiguator for the geoname consisting of country name and type.
 */
function _yild_geonames_get_type($obj) {
  $ret = array();
  if (!empty($obj['countryName'])) {
    $ret[] = $obj['countryName'];
  }
  if (!empty($obj['fcodeName'])) {
    $ret[] = $obj['fcodeName'];
  }
  return implode(', ', $ret);
}

/**
 * Returns a Yild-compatible id based on the Geonames unique id.
 *
 * @param string $id
 *   The unique id as provided by Geonames.
 */
function _yild_geonames_get_id($id) {
  return str_replace(' ', '', 'geonames:' . $id);
}

/**
 * Implements hook_yild_geolocation().
 *
 * Indicates this provider supports geolocation with longitude/latitude
 * coordinates.
 */
function yild_geonames_yild_geolocation() {
  return TRUE;
}

/**
 * Implements hook_yild_yild_google_apikey().
 */
function yild_geonames_yild_google_api_key() {
  return variable_get('yild_geonames_googlekey');
}
